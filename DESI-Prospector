import time, sys, os
import numpy as np 
from astropy.table import Table, join
import matplotlib.pyplot as plt
import h5py
import scipy

import fsps
import sedpy
import prospect
import dynesty
import pandas as pd

from prospect.io import write_results, read_results
from prospect.fitting import fit_model

%matplotlib inline

cat = Table.read('/home/research/Downloads/desi-sv3-pv.fits')
I = (cat['ZWARN']==0) *(cat['FLUX_G']>0)*(cat['FLUX_Z']>0)*(cat['FLUX_R']>0)*(cat['FLUX_W1']>0)*(cat['FLUX_W2']>0)
cat=cat[I]
cat=cat[:5]
cat

def build_obs(onecat, verbose=False):
    """Build a dictionary of observational data.  In this example 
    the data consist of photometry for a single nearby dwarf galaxy 
    from Johnson et al. 2013.
    
    :param snr:
        The S/N to assign to the photometry, since none are reported 
        in Johnson et al. 2013
        
    :param ldist:
        The luminosity distance to assume for translating absolute magnitudes 
        into apparent magnitudes.
        
    :returns obs:
        A dictionary of observational data to use in the fit.
    """
    from prospect.utils.obsutils import fix_obs
    import sedpy

    # The obs dictionary, empty for now
    obs = {}
    obs['targetid'] = onecat['TARGETID']

    # These are the names of the relevant filters, 
    # in the same order as the photometric data (see below)
    #galex = ['galex_FUV', 'galex_NUV']
    wise = ['wise_w'+n for n in ['1','2']]
    grz = ['decam_{0}'.format(b) for b in ['g','r','z']]
    filternames = grz + wise
    #print(filternames)
    # And here we instantiate the `Filter()` objects using methods in `sedpy`,
    # and put the resultinf list of Filter objects in the "filters" key of the `obs` dictionary
    obs["filters"] = sedpy.observate.load_filters(filternames)

    maggies = 1e-9 * np.array([onecat['FLUX_'+band] for band in ['G','R', 'Z', 'W1', 'W2']])
    ivarmaggies = 1e18 * np.array([onecat['FLUX_IVAR_'+band] for band in ['G', 'R', 'Z', 'W1', 'W2']])

    # compute the uncertainty, being careful to catch ivarmaggies==0
    maggies_unc = np.zeros_like(maggies) + 1e16    
    good = ivarmaggies != 0
    if np.sum(good) > 0:
        maggies_unc[good] = 1. / np.sqrt(ivarmaggies[good])                
    
    obs["maggies"] = maggies
    obs["maggies_unc"] = maggies_unc

    # This is an array of effective wavelengths for each of the filters.  
    # It is not necessary, but it can be useful for plotting so we store it here as a convenience
    obs["phot_wave"] = np.array([f.wave_effective for f in obs["filters"]])
    
    #converting from recession velocity to redshift 
    obs['redshift'] = onecat['Z']
    obs['wavelength'] = None

    # This function ensures all required keys are present in the obs dictionary,
    # adding default values if necessary
    obs = fix_obs(obs)

    # initialize the run parameters dictionary
    run_params = {}
    run_params['redshift'] = obs['redshift']
    run_params['verbose'] = verbose
    run_params['min_method'] = 'lm'
    run_params['nmin'] = 1
    
    run_params["dynesty"] = True
    run_params["optimize"] = False
    run_params["emcee"] = False
    run_params["nested_method"] = "rwalk"
    run_params["nlive_init"] = 400
    run_params["nlive_batch"] = 200
    run_params["nested_dlogz_init"] = 0.05
    run_params["nested_posterior_thresh"] = 0.05
    run_params["nested_maxcall"] = int(1000) # int(1e7)
    
    return obs, run_params

def get_bestfit(results, obs, model=None, sps=None):
    """Given a sampling results dictionary, return
    the maximum aposteriori probability (MAP) parameter
    values.
    
    """
    from prospect.plotting.utils import best_sample
    from prospect.plotting.sfh import parametric_sfr
    
    pbest = best_sample(results) #changed results1 to results
    _, _, mfrac = model.predict(pbest, obs, sps=sps)
    
    massformed = model.params['mass']
    mstar = mfrac * massformed
    
    # account for the mass formed and get the SFR
    # https://github.com/bd-j/prospector/issues/226#issuecomment-920428496
    sfr = parametric_sfr(times=0, **model.params)

    bestfit = np.hstack((mstar, massformed, sfr, pbest[1:]))
    
    #bestfit = results['chain'][results['lnprobability'].argmax(), :]
    
    return bestfit

def make_sedplot(obs, model=None, sps=None, results=None):
    
    wphot = obs["phot_wave"]

    if model and sps:
        a = 1.0 + model.params.get('zred', 0.0) # cosmological redshifting
        if obs["wavelength"] is None:
            # *restframe* spectral wavelengths, since obs["wavelength"] is None
            wspec = sps.wavelengths 
            wspec *= a #redshift them

        if results:
            theta_map = get_theta_map(results)
            mspec_map, mphot_map, _ = model.mean_model(theta_map, obs, sps=sps)
        else:
            theta = model.theta.copy()
            initial_spec, initial_phot, initial_mfrac = model.sed(theta, obs=obs, sps=sps)

    plt.figure(figsize=(16,8))

    # plot Data, best fit model, and old models
    plt.errorbar(wphot, obs['maggies'], yerr=obs['maggies_unc'],
         label='Observed photometry', 
         marker='o', markersize=10, alpha=0.8, ls='', lw=3, 
         ecolor='tomato', markerfacecolor='none', markeredgecolor='tomato', 
         markeredgewidth=3)
    if model and sps:
        if results:
            plt.loglog(wspec, mspec_map, label='Model spectrum', 
                       lw=0.7, color='slateblue', alpha=0.7)
            plt.errorbar(wphot, mphot_map, label='Model photometry', 
                         marker='s', markersize=10, alpha=0.8, ls='', lw=3,
                         markerfacecolor='none', markeredgecolor='slateblue', 
                         markeredgewidth=3)
        else:
            plt.loglog(wspec, initial_spec, label='Model spectrum', 
                       lw=0.7, color='navy', alpha=0.7)
            plt.errorbar(wphot, initial_phot, label='Model photometry', 
                         marker='s',markersize=10, alpha=0.8, ls='', lw=3,
                         markerfacecolor='none', markeredgecolor='blue', 
                         markeredgewidth=3)

    # establish bounds
    good = (obs['maggies'] > 0) * (obs['maggies_unc'] < 1e16)
    #print(good)
    xmin, xmax = np.min(wphot)*0.8, np.max(wphot)/0.8
    ymin, ymax = obs["maggies"][good].min()*0.8, obs["maggies"][good].max()/0.4
    #print(ymin, ymax)

    # plot filter transmission curves
    for f in obs['filters']:
        w, t = f.wavelength.copy(), f.transmission.copy()
        t = t / t.max()
        t = 10**(0.2*(np.log10(ymax/ymin)))*t * ymin
        plt.loglog(w, t, lw=3, color='gray', alpha=0.7)

    # Prettify
    plt.xlabel('Wavelength [A]')
    plt.ylabel('Flux Density [maggies]')
    plt.xlim([xmin, xmax])
    plt.ylim([ymin, ymax])
    plt.legend(loc='best', fontsize=20)
    plt.tight_layout()

out1 = [build_obs(onecat) for onecat in cat]
allobs1, allrun_params1 = zip(*out1)
#obs = build_obs(cat[0])
#obs.keys()
make_sedplot(allobs1[1])

def build_model(obs, fixed_metallicity=None, add_duste=True):
    """Build a prospect.models.SedModel object
    
    :param object_redshift: (optional, default: None)
        If given, produce spectra and observed frame photometry appropriate 
        for thi redshift. Otherwise, the redshift will be zero.
        
    :param ldist: (optional, default: 10)
        The luminosity distance (in Mpc) for the model.  Spectra and observed 
        frame (apparent) photometry will be appropriate for this luminosity distance.
        
    :param fixed_metallicity: (optional, default: None)
        If given, fix the model metallicity (:math:`log(Z/Z_sun)`) to the given value.
        
    :param add_duste: (optional, default: False)
        If `True`, add dust emission and associated (fixed) parameters to the model.
        
    :returns model:
        An instance of prospect.models.SedModel
    """
    from prospect.models.sedmodel import SedModel
    from prospect.models.templates import TemplateLibrary
    from prospect.models import priors

    # Get (a copy of) one of the prepackaged model set dictionaries.
    # This is, somewhat confusingly, a dictionary of dictionaries, keyed by parameter name
    model_params = TemplateLibrary["parametric_sfh"]
    
    # Let's make some changes to initial values appropriate for our objects and data
    model_params["zred"]["init"] = obs['redshift']
    model_params["zred"]['isfree'] = False
    
    model_params["dust2"]["init"] = 0.05
    model_params["logzsol"]["init"] = 0.0
    model_params["tage"]["init"] = 5.0
    model_params["tau"]["init"] = 1.0
    model_params["mass"]["init"] = 1e9
    
    # hack - update the prior on mass
    model_params["mass"]["prior"] = priors.LogUniform(mini=1e8, maxi=1e12)
    
    # Change the model parameter specifications based on some keyword arguments
    if fixed_metallicity is not None:
        # make it a fixed parameter
        model_params["logzsol"]["isfree"] = False
        #And use value supplied by fixed_metallicity keyword
        model_params["logzsol"]['init'] = fixed_metallicity 

    if add_duste:
        # Add dust emission (with fixed dust SED parameters)
        # Since `model_params` is a dictionary of parameter specifications, 
        # and `TemplateLibrary` returns dictionaries of parameter specifications, 
        # we can just update `model_params` with the parameters described in the 
        # pre-packaged `dust_emission` parameter set.
        model_params.update(TemplateLibrary["dust_emission"])
        
    # Now instantiate the model object using this dictionary of parameter specifications
    model = SedModel(model_params)

    return model

def build_sps(zcontinuous=1, **extras):
    """
    :param zcontinuous: 
        A vlue of 1 insures that we use interpolation between SSPs to 
        have a continuous metallicity parameter (`logzsol`)
        See python-FSPS documentation for details
    """
    from prospect.sources import CSPSpecBasis
    sps = CSPSpecBasis(zcontinuous=zcontinuous)#*1e18
    return sps

#allrun_params["zcontinuous"] = 1

def fit_one_galaxy(obs, run_params, sps=None, model=None, overwrite=False):
    
    # if the output file exists, read it
    hfile = '{}_dynesty_mcmc.h5'.format(obs['targetid'])
    if not os.path.isfile(hfile) or overwrite:
        if os.path.isfile(hfile) and overwrite:
            os.remove(hfile)

        if sps is None:
            sps = build_sps()
        if model is None:
            model = build_model(obs, fixed_metallicity=0.0)
 
        print("\nInitial free parameter vector theta:\n  {}\n".format(model.theta))
        #print("Initial parameter dictionary:\n{}".format(model.params))
  
        output = fit_model(obs, model, sps, **run_params)
        print("Done optimization in {:.2f} minutes".format(output["optimization"][1] / 60))
    
        # write out results
        print(f'Writing {hfile}')
        write_results.write_hdf5(hfile, run_params, model, obs,
                                 output["sampling"][0], output["optimization"][0],
                                 tsample=output["sampling"][1],
                                 toptimize=output["optimization"][1])
        
    #print(hfile)
    results, _, _ = read_results.results_from(hfile, dangerous=False)

    return results

def fit_all_galaxies(cat, outfile=None):
    ngal = len(cat)
    starmass = np.zeros(ngal)
    sps = build_sps()
    
    out = Table()
    out['TARGETID'] = cat['TARGETID']
    out['LOGMSTAR_PRO'] = np.zeros(ngal, dtype='f4')
    out['DUST2_PRO'] = np.zeros(ngal, dtype='f4')
    out['TAGE_PRO'] = np.zeros(ngal, dtype='f4')
    out['TAU_PRO'] = np.zeros(ngal, dtype='f4')
    out['LOGSFR_PRO'] = np.zeros(ngal, dtype='f4')


    for igal, onecat in enumerate(cat):
        
        if igal % 10 == 0:
            print(f'Working on galaxy {igal}/{ngal}.')
        
        obs, run_params = build_obs(onecat)
        #print(obs)
        model = build_model(obs, fixed_metallicity=0.0)
        #make_sedplot(obs, sps=sps, model=model)

        results = fit_one_galaxy(obs, model=model, sps=sps, run_params=run_params, overwrite=False)

        # parse the maximum likelihood results and pack into a table
        mstar, _, sfr, dust2, tage, tau = get_bestfit(results, obs, sps=sps, model=model)
        out['LOGMSTAR_PRO'][igal] = np.log10(mstar) # [Msun]
        out['DUST2_PRO'][igal] = dust2
        out['TAGE_PRO'][igal] = tage # [Gyr]
        out['TAU_PRO'][igal] = tau # [Gyr]
        if sfr > 0:
            out['LOGSFR_PRO'][igal] = np.log10(sfr) #Msun/yr
        else:
            out['LOGSFR_PRO'][igal] = -10.
    # Combines the tables out and catalog together
    out = join(cat, out, keys='TARGETID')
        
    if outfile:
        print(f'Writing {outfile}')
        out.write(outfile, overwrite=True) 

    return out

outfile = 'desi-sv3-pv-prospector.fits'
if os.path.isfile(outfile): #and False:
    pro = Table.read(outfile)
    print('Read {} galaxies from {}'.format(len(pro), outfile))
else:
    pro = fit_all_galaxies(cat, outfile=outfile)

